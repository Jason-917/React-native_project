import React,{useState} from 'react';
import {StyleSheet, Text, TouchableOpacity,View} from 'react-native';
import type {PropWithChildren} from 'react';

const FlexDirectionBasics = () => {
    const [flexDirection, setflexDirection] = useState('column');

    return(
        <PreviewLayout
        label = "flexDirection"
        values = {['column','row','row-reverse','column-reverse']}
        selectedValue = {flexDirection}
        setSelecedValue = {setflexDirection}>
        <View style = {[styles.box,{background-color: 'powderblue';}]}/>
        <View style = {[styles.box,{background-color: 'skyblue';}]}/>
        <View style = {[styles.box,{background-color: 'steelblue';}]}/>
        </PreviewLayout>
    );
};


type PreviewLayoutProps = PropsWithChildren<{
    label: string;
    values:string[];
    setSelectedValue:(value: string) => void;
}>;

type Movie = {
    id: string;
    title: string;
    releaseYear:string;
};

const App = () => {
    const [isLoading,setLoading] = useState(true);
    const [data,setData] = useState<Movie[]>([]);

    const getMovies = async = () => {
        try{
            cosnt response = await fetch('https://reactnative.dev/movies.json');
            cosnt json = await response.json();
            setData(json.movies);
        }catch(error){
            console.error(error);
        }finally{
            setLoading(false);
        }
    };
    useEffect(() => {
        getMoview();
    },[]);

    return(
        <view>
    )

    const getMoviesFromApi = () => {
        return fetch('https://reactnative.dev/movies.json')
        .then(response => response.json())
        .then(json =>{
            return json.movies;
        })
        .catch(error => {
            console.error(error);
        });
    };

    const getMoviesFromApiAsync = async () => {
        try{
            const response = await fetch(
                'https://reactnative.dev/movies.json',
            );
            const json = await response json();
            return json.movies;
        }catch(error){
            console.error(error);
        }
    };

}

const request = new XMLHttpRequest();
request onreadystatechange = e => {
    if(request.readyState !==4 ){
        return;
    }

    if(request.status === 200){
        console.log('success',request.responseText);
    }else{
        console.warn('error');
    }
};
request.open('GET','https://mywebsite.com/endpoint/');
request.send();

type Movie = {
    id: string;
    title:string;
    releaseYear:string;
};

const App = () => {
    const [isLoading,setLoading] = useState(true);
    const [data,setData] = useState<Movie[]>([]);

    const getMovies = async () => {
        try{
            const response = await fetch('http://reactnative.dev/movies.json');
            const json = await response.json();
            setData(json.movies);
        }catch(error){
            console.error(error);
        }finally {
            setLoading(false);
        }
    };


    useEffect(() => {
        getMovies();
    },[]);

    return (
        <View style = {{flex: 1,padding: 24}}>
        {isLoading ? (
            <ActivityIndicator />
        ): (
            <FlatList
            data = {data}
            keyExtractor = {({id}) => id}
            renderItem = {({item}) => (
                <Text>
                    {item.title},{item.releaseYear}
                </Text>
            )}
        />
        )}
    </View>
    );
};


const request = new XMLHttpRequest();
request onreadystatechange = e => {
    if(request.readyState !== 4){
        return;
    }

    if(request.status === 200){
        console.log('success',request.responseText);
    }else {
        console.warn('error');
    }
};

request.open('GET','https://mywebsite.com/endpoint/');
request.send();

const ws = new WebSocket('ws://host.com/path');

ws.onopen = () => {
    // connection opened.
    ws.send('something');
};

ws onmessage = e => {
    // a message was received
    console.log(e.data);
};

ws.onerror = e => {
    //an error occurred
    console.log(e.message);
};

ws.onclose = e => {
    //connection closed
    console.log(e.code, e.reason);
}


































